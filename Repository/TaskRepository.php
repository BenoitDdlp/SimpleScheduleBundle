<?php

namespace IDCI\Bundle\SimpleScheduleBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * TaskRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaskRepository extends EntityRepository
{
    /**
     * Sort tasks
     * 
     * @param Task array
     * 
     * @return Task array
     */
    public function sortTasksForPlanning($tasks)
    {
        $sortedTasks = array();
        
        $days = array(
            1 => 'monday',
            2 => 'tuesday',
            3 => 'wednesday',
            4 => 'thursday',
            5 => 'friday',
            6 => 'saturday',
            7 => 'sunday'
        );
        
        foreach ($days as $key => $day) {
            foreach($tasks as $task) {
                if(
                    $task->getDay() == $key
                    && $task->getStartsOn()->format('H:i') < '12:00'
                ) {
                        $sortedTasks["morning"][$day][] = $task;
                }
              }
        }
        foreach ($days as $key => $day) {
            foreach($tasks as $task) {
                if(
                    $task->getDay() == $key
                    && $task->getStartsOn()->format('H:i') > '12:00' 
                    && $task->getStartsOn()->format('H:i') < '16:00'
                ) {
                        $sortedTasks["afternoon"][$day][] = $task;
                }
            }
        }
        foreach ($days as $key => $day) {
            foreach($tasks as $task) {
                if(
                    $task->getDay() == $key
                    && $task->getStartsOn()->format('H:i') > '16:00'
                ) {
                        $sortedTasks["evenning"][$day][] = $task;
                }
            }
        }
        
        return $sortedTasks;
    }
    
    /**
     * find results based on request
     * 
     * @param array (request parameters)
     * @return entities
     */
    public function findTasksBasedOnRequest($parameters)
    {
        $q = $this->findTasksBasedOnRequestQuery($parameters);

        return is_null($q) ? array() : $q->getResult();
    }
    
    /**
     * find results based on request query
     *
     * @param array (request parameters)
     * @return DoctrineQuery
     */
    public function findTasksBasedOnRequestQuery($parameters)
    {
        $qb = $this->findTasksBasedOnRequestQueryBuilder($parameters);
        return is_null($qb) ? $qb : $qb->getQuery();
    }
    
    
    /**
     * find results based on request query builder
     *
     * @param array (request parameters)
     * @return DoctrineQueryBuilder
     */
    public function findTasksBasedOnRequestQueryBuilder($parameters)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('t')
           ->from('IDCISimpleScheduleBundle:Task', 't')
        ;

        foreach($parameters as $param => $value) {
            $function = sprintf('buildQuery%s', ucfirst(strtolower($param)));

            if(method_exists($this, $function)) {
                self::$function($qb, $value, $parameters);
            }
        }

        return $qb;
    }
    
    /**
     * Set queryBuilder based on the end time of a task (ex: ?hourends=10:20&operator=gt)
     *
     * @param queryBuilder qb
     * @param array value
     * @param array parameters
     */
    public static function buildQueryHourEnds(&$qb, $value, $parameters)
    {
        if(isset($parameters['operator'])) {
            if($parameters['operator'] == 'lt') {
                $qb->andWhere('t.ends_on < :ends_on')
                    ->setParameter('ends_on', $value)
                ;
            }
            else if($parameters['operator'] == 'gt') {
                $qb->andWhere('t.ends_on > :ends_on')
                    ->setParameter('ends_on', $value)
                ;
            }
            else {
                $qb->andWhere('t.ends_on = :ends_on')
                    ->setParameter('ends_on', $value)
                ;
            }
        }
        else {
            $qb->andWhere('t.ends_on = :ends_on')
                ->setParameter('ends_on', $value)
            ;
        }
    }
    
    /**
     * Set queryBuilder based on the start time of a task (ex: ?hourstarts=10:20&operator=gt)
     *
     * @param queryBuilder qb
     * @param array value
     * @param array parameters
     */
    public static function buildQueryHourStarts(&$qb, $value, $parameters)
    {
        if(isset($parameters['operator'])) {
            if($parameters['operator'] == 'lt') {
                $qb->andWhere('t.starts_on < :starts_on')
                    ->setParameter('starts_on', $value)
                ;
            }
            else if($parameters['operator'] == 'gt') {
                $qb->andWhere('t.starts_on > :starts_on')
                    ->setParameter('starts_on', $value)
                ;
            }
            else {
                $qb->andWhere('t.starts_on = :starts_on')
                    ->setParameter('starts_on', $value)
                ;
            }
        }
        else {
            $qb->andWhere('t.starts_on = :starts_on')
                ->setParameter('starts_on', $value)
            ;
        }
    }
    
    /**
     * Set queryBuilder based on day
     *
     * @param queryBuilder qb
     * @param array value
     * @param array parameters
     */
    public static function buildQueryDay(&$qb, $value, $parameters)
    {
        $days = array(
              1 => 'monday',
              2 => 'tuesday',
              3 => 'wednesday',
              4 => 'thursday',
              5 => 'friday',
              6 => 'saturday',
              7 => 'sunday'
        );

        foreach($days as $key => $day) {
          if($value == $day) {
              $qb->andWhere('t.day = :day')
                  ->setParameter('day', $key)
              ;
          }
        }
    }
    
    /**
     * Set queryBuilder based on ActivityType
     *
     * @param queryBuilder qb
     * @param array value
     * @param array parameters
     */
     public static function buildQueryActivity(&$qb, $value, $parameters)
     {
       $activities = array(
            1  => 'caf',
            2  => 'bodypump',
            3  => 'trx',
            4  => 'abdos_fessiers',
            5  => 'bodysculpt',
            6  => 'aquacycling',
            7  => 'aquabody',
            8  => 'aquadynamic',
            9  => 'aquazumba',
            10 => 'rpm',
            11 => 'bodycombat',
            12 => 'stepniv1',
            13 => 'bodyattack',
            14 => 'aeroniv2',
            15 => 'stepniv2',
            16 => 'aeroniv1',
            17 => 'initiation_step',
            18 => 'initiaion_areo',
            19 => 'zumba',
            20 => 'house',
            21 => 'zumba_gold',
            22 => 'zubatomic',
            23 => 'hiphop',
            24 => 'bodyrun',
            25 => 'cross_training',
            26 => 'circuit_training',
            27 => 'body_balance',
            28 => 'yoga',
            29 => 'pilates',
            30 => 'stretching'
        );
       
       foreach($activities as $key => $activity) {
            if($value == $activity) {
                $qb->andWhere('t.activity = :activity')
                    ->setParameter('activity', $key)
                ;
            }
        }
     }
    
    /**
     * Set queryBuilder based on location.
     *
     * @param queryBuilder qb
     * @param array value
     * @param array parameters
     */
    public static function buildQueryLocation(&$qb, $value, $parameters)
    {
        $locations = array(
            1 => 'fitness',
            2 => 'rpm',
            3 => 'circuit',
            4 => 'aqua',
            5 => 'cross',
            6 => 'outdoor'
        );

        foreach($locations as $key => $location) {
            if($value == $location) {
                $qb->andWhere('t.location = :location')
                    ->setParameter('location', $key)
                ;
            }
        }
    }
    
}
